@model int
@{
    ViewData["Title"] = "Mailroom";
    var memberID = Context.Session.GetString("MemberID");
    var googleMemberId = Context.Session.GetString("GoogleMemberID");
    var displayMemberId = !string.IsNullOrEmpty(googleMemberId) ? googleMemberId : memberID;
}


<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&family=Comic+Sans+MS&family=Orbitron:wght@700&family=Playfair+Display:wght@600&family=Nunito:wght@600&display=swap" rel="stylesheet">


    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>房客房東對話框</title>
    <style>
        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        .header {
            background-color: #2d3e50;
            color: white;
            padding: 20px;
            text-align: center;
        }

        .chatbox {
            position: fixed;
            bottom: 0;
            left: 0;
            z-index: 1000;
            display: flex;
            flex-direction: row;
            align-items: flex-start;
            margin: 10px;
        }

        .chatbox-button {
            background-color: #0078d4;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease-in-out;
        }

            .chatbox-button:hover {
                transform: scale(1.1);
                box-shadow: 0 6px 8px rgba(0, 0, 0, 0.2);
            }

        .chat-options {
            background-color: #fff;
            color: #333;
            border-radius: 8px;
            margin-left: 10px; /* 調整間距 */
            display: flex;
            flex-direction: row; /* 水平排列 */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

            .chat-options button {
                background-color: transparent;
                color: #333;
                border: none;
                padding: 10px;
                cursor: pointer;
                text-align: left;
                transition: all 0.2s ease-in-out;
            }

                .chat-options button:hover {
                    background-color: #f0f0f0;
                }

        .chatbox-content,
        .email-chat-content {
            opacity: 0;
            transform: translateY(100%);
            transition: all 0.5s ease-in-out;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 300px; /* 固定寬度 */
            overflow: hidden;
            display: none;
            flex-direction: column;
            height: 300px; /* 固定高度 */
            position: absolute; /* 絕對定位 */
            bottom: 60px; /* 確保緊貼在按鈕上方 */
        }

        .chatbox-header {
            background-color: #0078d4;
            color: white;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 8px 8px 0 0;
        }

        .chatbox-body {
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* 確保 .input-container 置底 */
            height: calc(100% - 40px);
            padding: 10px;
        }

        .chat-messages {
            max-height: 200px;
            overflow-y: auto;
            flex: 1;
        }

        .chatbox-footer {
            padding: 10px;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            border-radius: 0 0 8px 8px;
        }

        .chat-header {
            flex-direction: row;
            background-color: #8660c7;
            color: white;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 8px 8px 0 0;
        }

        .chat-title {
            font-weight: normal;
            font-family: "Microsoft JhengHei", Arial, sans-serif;
        }

        .chat-body {
            display: flex;
            flex-direction: column;
            justify-content: space-between; /* 確保 .input-container 置底 */
            height: calc(100%);
            padding: 10px;
        }

        .chat-header .minimize-chat {
            background-color: transparent;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 1.2em;
            margin-left: 8px;
        }

        .message-bubble {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 16px;
            position: relative;
        }

        .system-message {
            font-size: 0.85em;
            color: #999;
            background-color: #f5f5f5;
            padding: 8px;
            border-radius: 8px;
        }

        .timestamp {
            font-size: 0.75em;
            color: #666;
            text-align: right;
            margin-bottom: 5px;
        }

        .message-content {
            background-color: #e3f2fd;
            padding: 8px 12px;
            border-radius: 16px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            display: inline-block;
            color: #333;
        }

        .message-container {
            max-width: 80%;
            word-wrap: break-word;
            position: relative;
            text-align: right;
        }

        .input-container {
            display: flex;
            align-items: center;
            padding: 10px;
            background-color: #f0f0f0;
            border-top: 1px solid #ccc;
            margin-top: auto; /* 使 .input-container 置底 */
            width: 100%; /* 確保容器寬度為100% */
        }

            .input-container input,
            .input-container textarea {
                flex: 1;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 8px;
                font-family: inherit;
                margin-right: 8px;
                height: 120%;
                width: 80%; /* 調整輸入框寬度 */
            }

            .input-container button {
                width: 40px;
                align-items: center;
                display: flex;
                justify-content: center;
            }

                .input-container button:hover {
                    background-color: #005bb5;
                }

        .chatbox-content.show,
        .email-chat-content.show {
            opacity: 1;
            transform: translateY(0);
            display: flex;
        }

        button {
            background-color: #0078d4;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
        }

            button:hover {
                background-color: #005bb5;
            }

        textarea {
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 8px;
            font-family: inherit;
            resize: vertical;
            width: 100%;
        }

/* -------------快問快答的css--------------*/
    .chat-navbar {
    background-color: #0078d4;
    color: white;
    padding: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 60px;
}

.myText {
    font-family: 'Nunito', sans-serif;               /*font-family: 'Comic Sans MS', cursive;*/    /*font-family: 'Nunito', sans-serif;*/
    color:whitesmoke;
    font-size: 25px;
    font-weight: 600;
    padding-top: 15px; /* 將文字往下移動 */
}

.chat-logo {
    height: 100%;
    display: flex;
    align-items: center;
    margin-left: auto; /* 这会将 logo 推到右边 */
    margin-right: 10px; /* 给 logo 一些右边距 */
}

.chat-logo img {
    height: 50px;
    width: auto;
    max-width: none;
    object-fit: contain;
}

.minimize-chat {
    background-color: transparent;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 1.2em;
}






    </style>
</head>
<body>
    <div class="chatbox">
        <button class="chatbox-button" aria-label="Chat">
            <svg width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
                <path d="M2 2c-.35 0-.687.06-1 .17A8.013 8.013 0 0 0 8 15.792c.417-.13.82-.292 1.2-.48A7.964 7.964 0 0 0 8 14a8 8 0 1 0 0-12H2z" />
                <path d="M3 3h8a5 5 0 1 1 0 10 5 5 0 0 1-1-.127 4.992 4.992 0 0 1-4 1.104 4.992 4.992 0 0 1-2-4.004A5 5 0 0 1 3 3z" />
            </svg>
        </button>

        <div class="chat-options">
            <button data-chat="quick-chat">快問快答</button>
            <button data-chat="email-chat">發電郵給住宿</button>
        </div>

<div class="chatbox-content">
    <div class="chat-navbar">
        <p class="myText">FunHelper</p>
        <div class="chat-logo">
            <img src="~/image/julia/queenbot.png" alt="平台 Logo">
        </div>
        <button class="minimize-chat">-</button>
    </div>
    <iframe src='https://webchat.botframework.com/embed/0619-chatbot-bot?s=h5kAoRobqWU.jQiq7j_QBmyzbGFmlLI4L75VMWID74v2P_LUOrJ6KYs' style='min-width: 400px; width: 100%; min-height: 500px;'></iframe>
</div>

      
        </div>

        <div class="email-chat-content">
            <div class="chat-header">
                <span class="chat-title">有問題想問住宿嗎?</span>
                <button class="btn btn-light btn-sm minimize-chat">-</button>
            </div>
            <div class="chat-body">
                <div class="system-message">
                    系統將保留此對話記錄。要瞭解更多資訊,請參閱我們的
                    <a href="/info/privacypolicy.html" target="_blank">隱私政策</a>。
                </div>
                <div class="chat-messages" id="email-messages"></div>
                <div class="input-container">
                    <input type="text" id="email-input" placeholder="我要問問題" />
                    <button onclick="sendMessage('email')" class="fa-brands fa-google-play"></button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://kit.fontawesome.com/091893cea4.js" crossorigin="anonymous"></script>
    <script>
        const chatboxButton = document.querySelector('.chatbox-button');
        const chatOptions = document.querySelector('.chat-options');
        const chatboxContent = document.querySelector('.chatbox-content');
        const emailChatContent = document.querySelector('.email-chat-content');
        // 將 memberId 和 displayMemberId 傳遞給 JavaScript 變數
        const hotelID = '@Model';
        const displayMemberId = '@displayMemberId';

        


        chatboxButton.addEventListener('click', function () {
            if (chatOptions.style.display === 'none' || chatOptions.style.display === '') {
                chatOptions.style.display = 'flex';
                chatboxContent.style.display = 'none';
                emailChatContent.style.display = 'none';
                chatboxContent.classList.remove('show');
                emailChatContent.classList.remove('show');
            } else {
                chatOptions.style.display = 'none';
            }
        });

        document.querySelectorAll('.chat-options button').forEach(function (button) {
            button.addEventListener('click', function () {
                const chatType = this.getAttribute('data-chat');
                if (chatType === 'quick-chat') {
                    chatOptions.style.display = 'flex';
                    chatboxContent.style.display = 'flex';
                    emailChatContent.style.display = 'none';
                    chatboxContent.classList.add('show');
                    emailChatContent.classList.remove('show');
                } else if (chatType === 'email-chat') {
                    chatOptions.style.display = 'flex';
                    chatboxContent.style.display = 'none';
                    emailChatContent.style.display = 'flex';
                    emailChatContent.classList.add('show');
                    chatboxContent.classList.remove('show');
                }
            });
        });

        document.querySelectorAll('.minimize-chat').forEach(function (button) {
            button.addEventListener('click', function () {
                const chatboxContent = this.closest('.chatbox-content') || this.closest('.email-chat-content');
                chatboxContent.classList.remove('show');
                setTimeout(() => chatboxContent.style.display = 'none', 500);
            });
        });

        function sendMessage(type) {
            console.log("DisplayMemberID: " + displayMemberId );
            fetch(`https://localhost:7103/api/Hotels/GetMemberIdByHotelId/${hotelID}`)
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(error => { throw new Error(error); });
                    }
                    return response.text(); // 解析為文本
                })
                .then(data => {
                    console.log('Member ID:', data); // 這裡的 data 會是回傳的 MemberId
                    const memberId = parseInt(data, 10); // 解析為數字
                    if (isNaN(memberId)) {
                        throw new Error('Invalid Member ID');
                    }

                    // 獲取輸入的 email
                    const emailInput = document.getElementById('inputemail').value;

                    // 構建發送消息的 API URL
                    const sendMessageUrl = `https://localhost:7103/api/Websocket/sendMessage?senderId=${displayMemberId}&receiverId=${memberId}`;

                    // 發送消息
                    return fetch(sendMessageUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: emailInput
                        })
                    });
                })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(error => { throw new Error(error); });
                    }
                    return response.text();
                })
                .then(data => {
                    console.log('Message sent successfully:', data);
                })
                .catch(error => {
                    console.error('Error:', error.message);
                });

            let input;
            let messagesContainer;
            let memberEmail = "leo10117212000@gmail.com";
            let housemanEmail = "leo10117212000@gmail.com";
            let memberSubject = '您的訊息已發送至房東';
            let housemanSubject = '有房客向您傳送了訊息';

            if (type === 'quick') {
                input = document.getElementById('quick-input');
                messagesContainer = document.getElementById('quick-messages');
            } else if (type === 'email') {
                input = document.getElementById('email-input');
                messagesContainer = document.getElementById('email-messages');
            }

            const messageText = input.value.trim();
            if (messageText) {
                const messageBubble = document.createElement('div');
                messageBubble.className = 'message-bubble';

                const messageContent = document.createElement('div');
                messageContent.className = 'message-content';
                messageContent.textContent = messageText;

                messageBubble.appendChild(messageContent);
                messagesContainer.appendChild(messageBubble);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;

                const sendingMessage = document.createElement('div');
                sendingMessage.className = 'system-message';
                sendingMessage.textContent = '傳送中...';
                messagesContainer.appendChild(sendingMessage);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;

                const sendEmail = (recipientEmail, subject) => {
                    return fetch('https://localhost:7103/api/Email/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            To: recipientEmail,
                            Subject: subject,
                            Body: messageText
                        })
                    });
                };

                Promise.all([
                    sendEmail(memberEmail, memberSubject),
                    sendEmail(housemanEmail, housemanSubject)
                ])
                    .then(responses => {
                        if (responses.every(response => response.ok)) {
                            messagesContainer.removeChild(sendingMessage);

                            const successMessage = document.createElement('div');
                            successMessage.className = 'system-message';
                            successMessage.textContent = '訊息傳送成功。';
                            messagesContainer.appendChild(successMessage);
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;

                            input.value = '';
                        } else {
                            throw new Error('One or more network responses were not ok');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);

                        messagesContainer.removeChild(sendingMessage);

                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'system-message';
                        errorMessage.textContent = '訊息傳送失敗，請稍後再試。';
                        messagesContainer.appendChild(errorMessage);
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    });
            }
        }
    </script>
</body>
</html>
